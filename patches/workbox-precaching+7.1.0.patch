diff --git a/node_modules/workbox-precaching/PrecacheController.js b/node_modules/workbox-precaching/PrecacheController.js
index e00975e..1f1a9fb 100644
--- a/node_modules/workbox-precaching/PrecacheController.js
+++ b/node_modules/workbox-precaching/PrecacheController.js
@@ -5,18 +5,18 @@
   license that can be found in the LICENSE file or at
   https://opensource.org/licenses/MIT.
 */
-import { assert } from 'workbox-core/_private/assert.js';
-import { cacheNames } from 'workbox-core/_private/cacheNames.js';
-import { logger } from 'workbox-core/_private/logger.js';
-import { WorkboxError } from 'workbox-core/_private/WorkboxError.js';
-import { waitUntil } from 'workbox-core/_private/waitUntil.js';
-import { createCacheKey } from './utils/createCacheKey.js';
-import { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js';
-import { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js';
-import { printCleanupDetails } from './utils/printCleanupDetails.js';
-import { printInstallDetails } from './utils/printInstallDetails.js';
-import { PrecacheStrategy } from './PrecacheStrategy.js';
-import './_version.js';
+import { assert } from 'workbox-core/_private/assert.js'
+import { cacheNames } from 'workbox-core/_private/cacheNames.js'
+import { logger } from 'workbox-core/_private/logger.js'
+import { waitUntil } from 'workbox-core/_private/waitUntil.js'
+import { WorkboxError } from 'workbox-core/_private/WorkboxError.js'
+import './_version.js'
+import { PrecacheStrategy } from './PrecacheStrategy.js'
+import { createCacheKey } from './utils/createCacheKey.js'
+import { PrecacheCacheKeyPlugin } from './utils/PrecacheCacheKeyPlugin.js'
+import { PrecacheInstallReportPlugin } from './utils/PrecacheInstallReportPlugin.js'
+import { printCleanupDetails } from './utils/printCleanupDetails.js'
+import { printInstallDetails } from './utils/printInstallDetails.js'
 /**
  * Performs efficient precaching of assets.
  *
@@ -145,6 +145,27 @@ class PrecacheController {
      * @return {Promise<workbox-precaching.InstallResult>}
      */
     install(event) {
+        const pool_limit = 3;
+        let pool_count = 0;
+        const request = async (url, cacheKey) => {
+            while (pool_count >= pool_limit) {
+                await new Promise((resolve) => setTimeout(resolve, Math.random() * 1000));
+            }
+            pool_count++;
+            const integrity = this._cacheKeysToIntegrities.get(cacheKey);
+            const cacheMode = this._urlsToCacheModes.get(url);
+            const request = new Request(url, {
+                integrity,
+                cache: cacheMode,
+                credentials: 'same-origin',
+            });
+            await Promise.all(this.strategy.handleAll({
+                params: { cacheKey },
+                request,
+                event,
+            }))
+            pool_count--;
+        }
         // waitUntil returns Promise<any>
         // eslint-disable-next-line @typescript-eslint/no-unsafe-return
         return waitUntil(event, async () => {
@@ -152,20 +173,11 @@ class PrecacheController {
             this.strategy.plugins.push(installReportPlugin);
             // Cache entries one at a time.
             // See https://github.com/GoogleChrome/workbox/issues/2528
+            const requests = [];
             for (const [url, cacheKey] of this._urlsToCacheKeys) {
-                const integrity = this._cacheKeysToIntegrities.get(cacheKey);
-                const cacheMode = this._urlsToCacheModes.get(url);
-                const request = new Request(url, {
-                    integrity,
-                    cache: cacheMode,
-                    credentials: 'same-origin',
-                });
-                await Promise.all(this.strategy.handleAll({
-                    params: { cacheKey },
-                    request,
-                    event,
-                }));
+                requests.push(request(url, cacheKey));
             }
+            await Promise.all(requests)
             const { updatedURLs, notUpdatedURLs } = installReportPlugin;
             if (process.env.NODE_ENV !== 'production') {
                 printInstallDetails(updatedURLs, notUpdatedURLs);
@@ -289,4 +301,5 @@ class PrecacheController {
         };
     }
 }
-export { PrecacheController };
+export { PrecacheController }
+
